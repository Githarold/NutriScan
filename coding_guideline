	코드 레이아웃
들여쓰기: 함수나 클래스 내부의 코드를 작성할 때 각 줄을 4개의 공백으로 들여 쓴다. 예를 들어, 함수 내부의 모든 명령문은 왼쪽 여백에서 4개의 공백 뒤에 시작한다.
줄 길이: 코드의 각 줄은 79자를 넘지 않도록 한다. 만약 한 줄이 너무 길어진다면, 여러 줄로 나누어 작성한다.
두 줄 띄우기: 서로 다른 클래스 정의 사이에는 두 줄을 띄운다. 이것은 코드의 다른 부분과 클래스 사이를 명확하게 구분하는 데 도움이 된다.
한 줄 띄우기: 클래스 내의 서로 다른 메서드 사이에는 한 줄을 띄운다. 이것은 클래스 내부의 다른 메소드들 사이를 분명하게 구분해 줍니다.

	임포트
임포트 규칙: 표준 라이브러리의 모듈을 먼저 임포트하고, 그 다음에 서드 파티 모듈, 마지막으로 자신의 애플리케이션 또는 로컬 라이브러리의 모듈을 임포트한다. 각 카테고리의 임포트 사이에는 빈 줄을 넣어 구분한다.

	화이트 스페이스
괄호 사용 시 공백: 괄호를 열 때나 닫을 때 괄호 안쪽에는 공백을 넣지 않는다. 예를 들어, 함수를 호출할 때 인자 리스트 앞뒤로 공백을 넣지 않는다.

	주석
블록 및 인라인 주석: 코드의 복잡한 부분을 설명하기 위해 블록 주석을 사용하거나, 특정 줄의 코드를 설명하기 위해 인라인 주석을 사용한다. 또한, 모든 함수, 클래스, 메서드에 문서화를 위한 주석을 달아야 한다.

	명명 규칙
변수와 함수명: 소문자를 사용하며, 여러 단어를 연결할 때는 언더스코어를 사용한다. 예를 들어, my_function이나 user_profile 같은 이름을 사용한다.
클래스명: 각 단어의 첫 글자를 대문자로 하는 CapWords 방식을 사용한다. 예를 들어, MyClass나 UserProfile 같은 이름을 사용한다.

	표현식과 문장
간결한 표현식: 코드 내에서 불필요한 괄호 사용을 피하고, 가능한 한 간결하고 명료한 표현을 사용한다. 예를 들어, if condition:은 if condition == True:보다 선호된다.

	프로그래밍 권장사항
'Flat'한 코드: 중첩된 구조보다는 가능한 한 단순한 구조를 선호한다. 예를 들어, 깊게 중첩된 if 문보다는 간단하고 직관적인 조건문을 사용한다.
시퀀스 비어 있는지 확인: 리스트나 튜플이 비어 있는지 확인할 때 if len(my_list) == 0: 대신 if not my_list:를 사용한다.

	오류 처리
예외 처리: try/except 블록을 사용하여 예외를 처리하고, 가능한 한 구체적인 예외 타입을 명시한다. 예를 들어, 모든 예외를 잡는 대신 ValueError나 TypeError와 같은 구체적인 예외를 처리한다.

